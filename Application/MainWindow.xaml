<Window x:Class="EditorApplication.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:local="clr-namespace:EditorApplication"
		xmlns:processors="clr-namespace:EditorApplication.Processors"
		xmlns:NetworkUI="clr-namespace:NetworkUI;assembly=NetworkUI"
		xmlns:NetworkVM="clr-namespace:NetworkVM;assembly=NetworkVM"
		xmlns:Utils="clr-namespace:Utils;assembly=Utils"
		Title="MainWindow" Height="350" Width="525">
	
	<Window.Resources>
		
		<ResourceDictionary>

			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="Processors/ProcessorViews.xaml" />
			</ResourceDictionary.MergedDictionaries>
			
			<RoutedUICommand x:Key="CreateNode"/>
			<RoutedUICommand x:Key="DeleteNode"/>
			<RoutedUICommand x:Key="DeleteLink"/>
			<RoutedUICommand x:Key="DeleteSelection"/>

			<RoutedUICommand x:Key="StartSimulation"/>
			<RoutedUICommand x:Key="PauseSimulation"/>
			<RoutedUICommand x:Key="StopSimulation"/>

			<RoutedUICommand x:Key="SaveFile"/>
			<RoutedUICommand x:Key="SaveFileAs"/>
			<RoutedUICommand x:Key="LoadFile"/>

			<RoutedUICommand x:Key="ResetZoom"/>

			<DataTemplate	DataType="{x:Type NetworkVM:Connector}">
				<DataTemplate.Resources>
					<Style TargetType="{x:Type ItemsControl}" x:Key="HideIfEmpty">
						<Style.Triggers>
							<DataTrigger Binding="{Binding AcceptedTypes.Count}" Value="0">
								<Setter Property="Visibility" Value="Collapsed"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
					<Style	TargetType="{x:Type TextBlock}" x:Key="ShowIfNotEmpty">
						<Setter Property="Visibility" Value="Collapsed"/>
						<Style.Triggers>
							<DataTrigger Binding="{Binding AcceptedTypes.Count}" Value="0">
								<Setter Property="Visibility" Value="Visible"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</DataTemplate.Resources>
				<DockPanel>
					<DockPanel.ToolTip>
						<StackPanel>
							<TextBlock FontWeight="Bold" Text="Accepted types"/>
							<ItemsControl	Style="{StaticResource HideIfEmpty}" ItemsSource="{Binding AcceptedTypes}">
								<ItemsControl.ItemsPanel>
									<ItemsPanelTemplate>
										<StackPanel IsItemsHost="True"/>
									</ItemsPanelTemplate>
								</ItemsControl.ItemsPanel>
								<ItemsControl.ItemTemplate>
									<DataTemplate>
										<TextBlock Text="{Binding}"></TextBlock>
									</DataTemplate>
								</ItemsControl.ItemTemplate>
							</ItemsControl>
							<TextBlock Style="{StaticResource ShowIfNotEmpty}" Text="All types are accepted"></TextBlock>
						</StackPanel>
					</DockPanel.ToolTip>
					<NetworkUI:ConnectorItem Width="10" Height="10" DockPanel.Dock="Left"></NetworkUI:ConnectorItem>
					<Label Content="{Binding Path=Name}"/>
				</DockPanel>
			</DataTemplate>

			<DataTemplate	DataType="{x:Type NetworkVM:OutputConnector}">
				<DataTemplate.Resources>
					<Style	TargetType="{x:Type ItemsControl}" x:Key="HideIfEmpty">
						<Style.Triggers>
							<DataTrigger Binding="{Binding OutputTypes.Count}" Value="0">
								<Setter Property="Visibility" Value="Collapsed"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
					<Style	TargetType="{x:Type TextBlock}" x:Key="ShowIfNotEmpty">
						<Setter Property="Visibility" Value="Collapsed"/>
						<Style.Triggers>
							<DataTrigger Binding="{Binding OutputTypes.Count}" Value="0">
								<Setter Property="Visibility" Value="Visible"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</DataTemplate.Resources>
				<DockPanel>
					<DockPanel.ToolTip>
						<StackPanel>
							<TextBlock	FontWeight="Bold" Text="Output types"/>
							<ItemsControl	Style="{StaticResource HideIfEmpty}" ItemsSource="{Binding OutputTypes}">
								<ItemsControl.ItemsPanel>
									<ItemsPanelTemplate>
										<StackPanel IsItemsHost="True"/>
									</ItemsPanelTemplate>
								</ItemsControl.ItemsPanel>
								<ItemsControl.ItemTemplate>
									<DataTemplate>
										<TextBlock Text="{Binding}"></TextBlock>
									</DataTemplate>
								</ItemsControl.ItemTemplate>
							</ItemsControl>
							<TextBlock	Style="{StaticResource ShowIfNotEmpty}" Text="Not specified"></TextBlock>
						</StackPanel>
					</DockPanel.ToolTip>
					<NetworkUI:ConnectorItem	Width="10" Height="10" DockPanel.Dock="Right"/>
					<Label	Content="{Binding Path=Name}" HorizontalContentAlignment="Right"/>
				</DockPanel>
			</DataTemplate>
			
			<DataTemplate	DataType="{x:Type NetworkVM:Link}">
				<local:FancyLink	Link="{Binding}"
									SourceHotspot="{Binding SourceHotspot}"
									DestinationHotspot="{Binding DestinationHotspot}"
									GhostSourceHotspot="{Binding GhostSourceHotspot}"
									GhostDestinationHotspot="{Binding GhostDestinationHotspot}"
									IsGhostAccepted="{Binding IsGhostAccepted}"
									IsGhostVisible="{Binding IsGhostVisible}">
					<local:FancyLink.ContextMenu>
						<ContextMenu>
							<MenuItem	Command="{StaticResource DeleteLink}" Header="Delete selected link(s)">
															
							</MenuItem>
						</ContextMenu>
					</local:FancyLink.ContextMenu>
				</local:FancyLink>
			</DataTemplate>

			<!-- Bind NodeItem properties to viewmodel -->
			<Style	TargetType="{x:Type NetworkUI:NodeItem}">
				<Setter Property="X" Value="{Binding X}"/>
				<Setter Property="Y" Value="{Binding Y}" />
				<Setter Property="ZIndex" Value="{Binding ZIndex}" />
				<Setter Property="IsSelected" Value="{Binding IsSelected}" />
				<Setter Property="Title" Value="{Binding Name}"/>
				<Setter Property="BorderBrush" Value="Black"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Background" Value="{x:Static SystemColors.WindowBrush}"/>
				<Setter Property="CornerRadius" Value="8"/>
				<Setter Property="BorderFill" Value="{x:Static SystemColors.InactiveCaptionBrush}"/>
				<Setter Property="InnerCornerRadius" Value="4"/>
				<Setter Property="ContextMenu">
					<Setter.Value>
						<ContextMenu>
							<MenuItem Command="{StaticResource DeleteNode}" Header="Delete node"></MenuItem>
						</ContextMenu>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger Property="IsSelected" Value="True">
						<Setter Property="BorderFill" Value="{x:Static SystemColors.ActiveCaptionBrush}"/>
					</Trigger>
					<Trigger Property="IsSelected" Value="False">
						<Setter Property="BorderFill" Value="{x:Static SystemColors.InactiveCaptionBrush}"/>
					</Trigger>
				</Style.Triggers>
			</Style>
			
			<Style	TargetType="{x:Type NetworkUI:LinkItem}">
				<Setter Property="IsSelected" Value="{Binding IsSelected}"/>
			</Style>

			<Style	TargetType="{x:Type NetworkUI:ConnectorItem}">
				<Setter Property="Hotspot" Value="{Binding Hotspot, Mode=OneWayToSource}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type NetworkUI:ConnectorItem}">
							<Ellipse Stroke="Black" StrokeThickness="1" Fill="{TemplateBinding Background}"/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<DataTrigger Binding="{Binding Type}" Value="{x:Static NetworkVM:ConnectorType.Input}">
						<Setter Property="Background" Value="Lime"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding Type}" Value="{x:Static NetworkVM:ConnectorType.Output}">
						<Setter Property="Background" Value="Red"/>
					</DataTrigger>
				</Style.Triggers>
			</Style>
			
			<Style	TargetType="{x:Type NetworkUI:EndpointItem}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type NetworkUI:EndpointItem}">
							<Path Fill="White" Stroke="Black" StrokeThickness="1">
								<Path.Data>
									<EllipseGeometry Center="0,0" RadiusX="4" RadiusY="4"/>
								</Path.Data>
							</Path>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			
			<RibbonGroupSizeDefinitionBaseCollection x:Key="DefaultLayout">
				<RibbonGroupSizeDefinition>
					<RibbonGroupSizeDefinition.ControlSizeDefinitions>
						<RibbonControlSizeDefinition ImageSize="Large" IsLabelVisible="True"/>
						<RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="True"/>
						<RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="True"/>
						<RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="True"/>
					</RibbonGroupSizeDefinition.ControlSizeDefinitions>
				</RibbonGroupSizeDefinition>
			</RibbonGroupSizeDefinitionBaseCollection>

			<Style TargetType="RibbonButton">
				<Setter Property="SmallImageSource" Value="{Binding LargeImageSource, RelativeSource={RelativeSource Self}}"/>
			</Style>
			<Style TargetType="RibbonSplitButton">
				<Setter Property="SmallImageSource" Value="{Binding LargeImageSource, RelativeSource={RelativeSource Self}}"/>
			</Style>

		</ResourceDictionary>
		
	</Window.Resources>
	
	<Window.CommandBindings>

		<!-- Node commands -->
		<CommandBinding Command="{StaticResource CreateNode}" Executed="CreateNode_Executed"/>
		<CommandBinding Command="{StaticResource DeleteNode}" Executed="DeleteNode_Executed"/>
		<CommandBinding Command="{StaticResource DeleteLink}" Executed="DeleteLink_Executed"/>
		<CommandBinding Command="{StaticResource DeleteSelection}" Executed="DeleteSelection_Executed"/>

		<!-- Simulation commands -->
		<CommandBinding Command="{StaticResource StartSimulation}" Executed="Simulation_Run_Executed"/>
		<CommandBinding Command="{StaticResource PauseSimulation}" Executed="Simulation_Pause_Executed"/>
		<CommandBinding Command="{StaticResource StopSimulation}" Executed="Simulation_Stop_Executed"/>
		
		<!-- Processor commands -->
		<CommandBinding Command="{StaticResource Processor_ForceProcess}" Executed="Processor_ForceProcess_Executed"/>
		
		<!-- File commands -->
		<CommandBinding Command="{StaticResource SaveFile}" Executed="SaveFile_Executed"/>
		<CommandBinding Command="{StaticResource SaveFileAs}" Executed="SaveFileAs_Executed"/>
		<CommandBinding Command="{StaticResource LoadFile}" Executed="LoadFile_Executed"/>
		
		<!-- Other commands -->
		<CommandBinding Command="{StaticResource ResetZoom}" Executed="ResetZoom_Executed"/>
		
	</Window.CommandBindings>

	<Window.InputBindings>
		<KeyBinding Command="{StaticResource DeleteSelection}" Key="Delete"/>
		<KeyBinding Command="{StaticResource ResetZoom}" Key="Home"/>
	</Window.InputBindings>
	
	<Window.ContextMenu>
		<ContextMenu>
			<MenuItem	Header="New processor..."
						CommandTarget="{Binding Path=PlacementTarget, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
						ItemsSource="{Binding ProcessorTypes}">
				<MenuItem.ItemContainerStyle>
					<Style>
						<Setter Property="MenuItem.Header" Value="{Binding Name}"/>
						<Setter Property="MenuItem.Command" Value="{StaticResource CreateNode}"/>
						<Setter Property="MenuItem.CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}}"/>
						<Setter Property="MenuItem.CommandTarget" Value="{Binding Path=PlacementTarget, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
					</Style>
				</MenuItem.ItemContainerStyle>
			</MenuItem>
			<MenuItem	Header="Restore Zoom" Command="{StaticResource ResetZoom}"
						CommandTarget="{Binding Path=PlacementTarget, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
		</ContextMenu>
	</Window.ContextMenu>
	
	<Window.DataContext>
		<local:MainViewModel/>
	</Window.DataContext>

	<DockPanel>
		<Ribbon DockPanel.Dock="Top">
			<Ribbon.ApplicationMenu>
				<!-- Hides the (blue) application menu-->
				<RibbonApplicationMenu Visibility="Collapsed"/>
			</Ribbon.ApplicationMenu>
			<RibbonTab Header="Main">
				<RibbonGroup Header="File" GroupSizeDefinitions="{StaticResource DefaultLayout}">
					<RibbonButton Label="Save" LargeImageSource="pack://application:,,,/Resources/save1.ico" Command="{StaticResource SaveFile}"/>
					<RibbonButton Label="Save as" LargeImageSource="pack://application:,,,/Resources/save2.ico" Command="{StaticResource SaveFileAs}"/>
					<RibbonButton Label="Load" LargeImageSource="pack://application:,,,/Resources/folder.ico" Command="{StaticResource LoadFile}"/>
				</RibbonGroup>
				<RibbonGroup Header="Simulation" GroupSizeDefinitions="{StaticResource DefaultLayout}">
					<RibbonButton Label="Run" LargeImageSource="pack://application:,,,/Resources/play.ico" Command="{StaticResource StartSimulation}"/>
					<RibbonButton Label="Pause" LargeImageSource="pack://application:,,,/Resources/pause.ico" Command="{StaticResource PauseSimulation}"/>
					<RibbonButton Label="Stop/Reset" LargeImageSource="pack://application:,,,/Resources/stop.ico" Command="{StaticResource StopSimulation}"/>
					<RibbonButton Label="{Binding Path=Pipeline.Status}" LargeImageSource="pack://application:,,,/Resources/heartbeat.ico">
						<RibbonButton.ToolTip>
							<ToolTip Content="Simulation status"/>
						</RibbonButton.ToolTip>
					</RibbonButton>
				</RibbonGroup>
				<RibbonGroup Header="View" GroupSizeDefinitions="{StaticResource DefaultLayout}">
					<RibbonButton Label="Restore" LargeImageSource="pack://application:,,,/Resources/shrink.ico" Command="{StaticResource ResetZoom}"/>
				</RibbonGroup>
			</RibbonTab>
		</Ribbon>
		<Button DockPanel.Dock="Bottom" Height="23" Click="Button_Click" Visibility="Collapsed"/>
		<Border	x:Name="NetworkViewContainer"
				Background="Transparent"
				ClipToBounds="True"
				MouseDown="NetworkViewContainer_MouseDown"
				MouseMove="NetworkViewContainer_MouseMove"
				MouseUp="NetworkViewContainer_MouseUp"
				MouseWheel="NetworkViewContainer_MouseWheel">
			<NetworkUI:NetworkView	x:Name="PART_NetworkView"
									NodesSource="{Binding Path=Pipeline.Nodes}"
									ConnectionsSource="{Binding Path=Pipeline.Links}"
									ConnectorLinkDragStarted="NetworkView_ConnectionDragStarted"
									ConnectorLinkDragging="NetworkView_ConnectionDragging"
									ConnectorLinkDragCompleted="NetworkView_ConnectionDragCompleted"
									ConnectorLinkFeedbackQuery="NetworkView_ConnectorLinkFeedbackQuery"
									ConnectorLinkFeedbackResult="NetworkView_ConnectorLinkFeedbackResult"
									EndpointLinkDragStarted="NetworkView_EndpointLinkDragStarted"
									EndpointLinkDragging="NetworkView_EndpointLinkDragging"
									EndpointLinkDragCompleted="NetworkView_EndpointLinkDragCompleted"
									EndpointLinkFeedbackQuery="NetworkView_EndpointLinkFeedbackQuery"
									EndpointLinkFeedbackResult="NetworkView_EndpointLinkFeedbackResult">
				<NetworkUI:NetworkView.RenderTransform>
					<TranslateTransform X="{Binding Pipeline.ViewOffset.X}" Y="{Binding Pipeline.ViewOffset.Y}"/>
				</NetworkUI:NetworkView.RenderTransform>
				<NetworkUI:NetworkView.LayoutTransform>
					<ScaleTransform ScaleX="{Binding Pipeline.ViewZoom}" ScaleY="{Binding ScaleX, RelativeSource={RelativeSource Self}}"/>
				</NetworkUI:NetworkView.LayoutTransform>
			</NetworkUI:NetworkView>
		</Border>
	</DockPanel>
	
</Window>
